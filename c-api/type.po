# Copyright (C) 2001-2018, Python Software Foundation
# For licence information, see README file.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-02 22:11+0200\n"
"PO-Revision-Date: 2018-09-20 21:33+0200\n"
"Language-Team: FRENCH <traductions@lists.afpy.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: \n"
"X-Generator: Poedit 1.8.11\n"

#: ../Doc/c-api/type.rst:6
msgid "Type Objects"
msgstr "Type d'objets"

#: ../Doc/c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr ""
"La structure en C des objets avait pour habitude de décrire les types natifs "
"en python."

#: ../Doc/c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as :class:"
"`type` in the Python layer."
msgstr ""
"Ceci est le type d'objet pour les autres types d'objets; C'est le même objet "
"que :class:`type` dans la couche de Python."

#: ../Doc/c-api/type.rst:24
msgid ""
"Return true if the object *o* is a type object, including instances of types "
"derived from the standard type object.  Return false in all other cases."
msgstr ""
"Retourne vrai si l'objet *o* est un type d'objet y compris les instances de "
"types dérivé d'un objet de type standard. Retourne faux dans tous les autres "
"cas."

#: ../Doc/c-api/type.rst:30
msgid ""
"Return true if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return false in all other cases."
msgstr ""
"Retourne vrai si l'objet *o* est un type d'objet mais pas un sous-type "
"d'objet standard. Retourne faux dans tous les autres cas."

#: ../Doc/c-api/type.rst:36
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr ""
"Nettoie le cache de recherche interne. Retourne la marque du drapeau courant."

#: ../Doc/c-api/type.rst:40
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with `Py_LIMITED_API`; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to :"
"c:member:`~PyTypeObject.tp_flags` itself is not part of the limited API."
msgstr ""
"Retourne le membre :c:member:`~PyTypeObject.tp_flags` du *type*. Cette "
"fonction est conçue pour utiliser en priorité `Py_LIMITED_API`; les bits du "
"drapeau son garanties pour être stables à travers les versions de Python, "
"mais l'accès à :c:member:`~PyTypeObject.tp_flags` lui même n'est pas fourni "
"par l'API."

#: ../Doc/c-api/type.rst:50
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""
"Confirme la non-validité du cache de recherche interne pour le type et tous "
"les sous-types. Cette fonction doit être appelée après chaque modification "
"des attributs ou des classes de bases du type."

#: ../Doc/c-api/type.rst:57
msgid ""
"Return true if the type object *o* sets the feature *feature*.  Type "
"features are denoted by single bit flags."
msgstr ""
"Retourne vrai si l'objet de type *o* met la fonctionnalité *feature*. Les "
"fonctionnalités de type sont marquées par des drapeaux binaire d'un bit."

#: ../Doc/c-api/type.rst:63
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""
"Retourne vrai si le type d'objet inclut le support pour le détecteur de "
"cycle; Ceci test le drapeau de type :const:`Py_TPFLAGS_HAVE_GC`."

#: ../Doc/c-api/type.rst:69
msgid "Return true if *a* is a subtype of *b*."
msgstr "Retourne vrai si *a* est un sous-type de *b*."

#: ../Doc/c-api/type.rst:71
msgid ""
"This function only checks for actual subtypes, which means that :meth:"
"`~class.__subclasscheck__` is not called on *b*.  Call :c:func:"
"`PyObject_IsSubclass` to do the same check that :func:`issubclass` would do."
msgstr ""

#: ../Doc/c-api/type.rst:79
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to *NULL*."
msgstr ""

#: ../Doc/c-api/type.rst:85
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's :c:member:`~PyTypeObject."
"tp_alloc` slot."
msgstr ""

#: ../Doc/c-api/type.rst:90
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""

#: ../Doc/c-api/type.rst:97
msgid ""
"Creates and returns a heap type object from the *spec* passed to the "
"function."
msgstr ""

#: ../Doc/c-api/type.rst:101
msgid ""
"Creates and returns a heap type object from the *spec*. In addition to that, "
"the created heap type contains all types contained by the *bases* tuple as "
"base types. This allows the caller to reference other heap types as base "
"types."
msgstr ""

#: ../Doc/c-api/type.rst:109
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"*NULL*, this indicates that either the slot is *NULL*, or that the function "
"was called with invalid parameters. Callers will typically cast the result "
"pointer into the appropriate function type."
msgstr ""
